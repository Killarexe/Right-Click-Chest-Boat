plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.neoforged.net/"}
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    // modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    var replaceProperties = [
            mod_id: mod_id,
            mod_version: mod_version,
            mod_icon: mod_icon,
            mod_license: mod_license,
            mod_name: mod_name,
            mod_description: mod_description,
            mod_url: mod_homepage_url,
            mod_issues_url: mod_issues_url,
            neoforge_update_json_url: neoforge_update_json_url,
            minecraft_version: minecraft_version,
            neoforge_loader_version_range: neoforge_loader_version_range,
            neoforge_version_range: neoforge_version_range,
            minecraft_version_range: neoforge_minecraft_version_range
    ]

    inputs.properties replaceProperties

    filesMatching("META-INF/neoforge.mods.toml") {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

base {
    archivesName = archives_base_name + "-neoforge"
}
